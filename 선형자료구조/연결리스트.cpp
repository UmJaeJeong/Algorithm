#include<stdio.h>

//배열 원소들의 순서를 유지하면서 임의의 위치에 원소를 삽입 또는 삭제하는 문제의 시간을 해결하기위한것이 연결리스트(Linked List)

//배열과 연결리스트의 차이 
//배열에서는 메모리의 연속된 위치에 각 원소들이 저장, 연결리스트는 원소들이 메모리 
//여기저기 흩어져 있고 다음 원소를 가르키는 포인터를 가지고있음

struct ListNode {
	int element; //담고 있는 원소
	ListNode *prev, *next; //이전노드, 다음노드의 포인터
};
//대개적으로 머리와 꼬리에 대한 포인터만을 가진 클래스로 연결리스트가 구현됨


//특정 i노드를 찾기위해서 드는 시간이 포인터를 따라가며 다음 노드 하나하나 검색해야되기 떄문에
//시간은 리스트 길이에 선형 비례한다.
//포인터만 변경하면 되기에 삽입 삭제는 상수 시간에 이루어짐 



//연결 리스트에서 노드를 삭제하고 다시 추가하기
//node 이전/이후 노드의 푸인터를 바꿔서 node를 리스트에서 삭제한다.
void deleteNode(ListNode* node) {
	node->prev->next = node->next;
	node->next->prev = node->prev;
}

//node 이전 /이후 노드의 포인터를 바꿔서 자기 자신을 다시 리스트에 삽입
void recoverNode(ListNode* node) {
	node->prev->next = node;
	node->next->prev = node;
}

//동적 배열과 연결리스트의 비교
//큰 차이점은 삽입과 삭제 그리고 원소에 접근하는 시간
//삽입 삭제를 할일이 없으면 동적배열이 좋음
//삽입 삭제가 자주 하면 연결리스트가 좋음